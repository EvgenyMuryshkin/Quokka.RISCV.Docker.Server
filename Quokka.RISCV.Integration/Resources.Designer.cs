//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quokka.RISCV.Integration {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Quokka.RISCV.Integration.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to elf: sections.lds test.S
        ///	riscv32-unknown-elf-gcc -march=rv32i -nostartfiles -Wl,-Bstatic,-T,sections.lds,--strip-debug,-Map=firmware.map,--cref  -ffreestanding -nostdlib -o firmware.elf test.S
        ///
        ///bin: elf
        ///	riscv32-unknown-elf-objcopy -O binary firmware.elf /dev/stdout &gt; firmware.bin
        ///
        ///clean:
        ///	rm -f firmware.elf firmware.bin firmware.map
        ///.
        /// </summary>
        internal static string asm_makefile {
            get {
                return ResourceManager.GetString("asm.makefile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MEMORY
        ///{
        ///    RAM (xrw)       : ORIGIN = 0x00000000, LENGTH = 0x008000 /* 32 KB */
        ///}
        ///
        ///SECTIONS {
        ///    .text :
        ///    {
        ///        . = ALIGN(4);
        ///        *(.text)           /* .text sections (code) */
        ///        *(.text*)          /* .text* sections (code) */
        ///        *(.rodata)         /* .rodata sections (constants, strings, etc.) */
        ///        *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
        ///        *(.srodata)         /* .rodata sections (constants, strings, etc.) */
        ///        *(.srodata [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string asm_sections {
            get {
                return ResourceManager.GetString("asm_sections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // This is free and unencumbered software released into the public domain.
        /////
        ///// Anyone is free to copy, modify, publish, use, compile, sell, or
        ///// distribute this software, either in source code form or as a compiled
        ///// binary, for any purpose, commercial or non-commercial, and by any
        ///// means.
        ///
        ///#define regnum_q0   0
        ///#define regnum_q1   1
        ///#define regnum_q2   2
        ///#define regnum_q3   3
        ///
        ///#define regnum_x0   0
        ///#define regnum_x1   1
        ///#define regnum_x2   2
        ///#define regnum_x3   3
        ///#define regnum_x4   4 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string custom_ops {
            get {
                return ResourceManager.GetString("custom_ops", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdint.h&gt;
        ///#include &lt;stdbool.h&gt;
        ///
        ///// a pointer to this is a null pointer, but the compiler does not
        ///// know that because &quot;sram&quot; is a linker symbol from sections.lds.
        ///extern uint32_t sram;
        ///
        ///#include &quot;plumbing.h&quot;
        ///#include &quot;dma.h&quot;
        ///{FIRMWARE_INCLUDES}
        ///
        ///extern uint32_t _sidata, _sdata, _edata, _sbss, _ebss,_heap_start;
        ///
        ///void main() {
        ///    set_irq_mask(0xff);
        ///
        ///    // zero out .bss section
        ///    for (uint32_t *dest = &amp;_sbss; dest &lt; &amp;_ebss;) {
        ///        *dest++ = 0;
        ///    }
        ///
        ///	{FIRMWARE_CODE}
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string firmware_template {
            get {
                return ResourceManager.GetString("firmware_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to `default_nettype none
        ///
        ///module RVTest (
        ///	input clk,
        ///	input resetn,
        ///	output         o_mem_valid,
        ///	output         o_mem_instr,
        ///
        ///	output  [31:0] 	o_mem_addr,
        ///	output  [31:0] 	o_mem_wdata,
        ///	output  [ 3:0] 	o_mem_wstrb,
        ///	output 			o_dbg_mem_valid,
        ///	output [31:0] 	o_dbg_mem_rdata,
        ///	output [31:0] 	o_dbg_mem_wdata,
        ///	output         	o_dbg_mem_we,
        ///	output         	o_dbg_data_access,
        ///	output         	o_dbg_mem_read,
        ///	output         	o_dbg_mem_write,
        ///	output [31:0]   o_dbg_tmp
        ///);
        ///
        ///	parameter [0:0] B [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string hardware_template {
            get {
                return ResourceManager.GetString("hardware_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdint.h&gt;
        ///
        ///uint32_t set_irq_mask(uint32_t mask); asm (
        ///    &quot;.global set_irq_mask\n&quot;
        ///    &quot;set_irq_mask:\n&quot;
        ///    &quot;.word 0x0605650b\n&quot;
        ///    &quot;ret\n&quot;
        ///);
        ///.
        /// </summary>
        internal static string irq {
            get {
                return ResourceManager.GetString("irq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///firmware.elf: sections.lds start.S irq.c firmware.cpp {SOURCES_LIST}
        ///	riscv32-unknown-elf-gcc -march=rv32im -nostartfiles -Wl,-Bstatic,-T,sections.lds,--strip-debug,-Map=firmware.map,--cref  -ffreestanding -nostdlib -o firmware.elf start.S irq.c firmware.cpp {SOURCES_LIST}
        ///
        ///firmware.bin: firmware.elf
        ///	riscv32-unknown-elf-objcopy -O binary firmware.elf /dev/stdout &gt; firmware.bin
        ///
        ///clean:
        ///	rm -f firmware.elf firmware.hex firmware.bin firmware.o firmware.map \
        ///	      hardware.blif hardware.log hardwar [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Makefile {
            get {
                return ResourceManager.GetString("Makefile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	// 16 bit memory logic for {NAME}
        ///	wire 			{NAME}_ready;
        ///	reg 			{NAME}_read_ready = 0;
        ///	reg 			{NAME}_write_ready = 0;
        ///	reg  [31:0]		{NAME}_rdata = 0;
        ///	reg  [15:0]		{NAME}_rdata_part = 0;
        ///	wire [15:0]		{NAME}_wdata;	
        ///	wire [31: 0]	{NAME}_read_address;
        ///	wire [31: 0]	{NAME}_write_address;
        ///	wire 			{NAME}_we;
        ///	reg  [2:0] 		{NAME}_read_state = 0;
        ///	wire 			{NAME}_address_valid;
        ///	reg				{NAME}_read_address_part = 0;
        ///	wire			{NAME}_write_address_part;
        ///
        ///	assign o_dbg_tmp = {NAME}_rdata;
        ///
        ///	assign  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string memory16_template {
            get {
                return ResourceManager.GetString("memory16_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	// 32 bit memory logic for {NAME}
        ///	wire 			{NAME}_ready;
        ///	reg 			{NAME}_read_ready = 1&apos;b0;
        ///	reg 			{NAME}_write_ready = 1&apos;b0;
        ///	reg  [31:0] {NAME}_rdata = 32&apos;b0;
        ///	wire [31:0] {NAME}_wdata;	
        ///	wire [31: 0]	{NAME}_address;
        ///	wire 			{NAME}_we;
        ///	reg  [1:0] 		{NAME}_write_state = 2&apos;b0;
        ///	wire 			{NAME}_address_valid;
        ///
        ///	assign {NAME}_address_valid = cpu_mem_addr[31:{SEG_END}] == {SEG_WIDTH}&apos;h{SEG};
        ///	assign {NAME}_ready = {NAME}_read_ready || {NAME}_write_ready;
        ///	
        ///	assign {NAME}_wdata = {
        ///		cpu_mem_ws [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string memory32_template {
            get {
                return ResourceManager.GetString("memory32_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	// 8 bit memory logic for {NAME}
        ///	wire 			{NAME}_ready;
        ///	reg 			{NAME}_read_ready = 0;
        ///	reg 			{NAME}_write_ready = 0;
        ///	reg  [31:0]		{NAME}_rdata = 0;
        ///	reg  [7:0]		{NAME}_rdata_part = 0;
        ///	wire [7:0]		{NAME}_wdata;	
        ///	wire [31: 0]	{NAME}_read_address;
        ///	wire [31: 0]	{NAME}_write_address;
        ///	wire 			{NAME}_we;
        ///	reg  [2:0] 		{NAME}_read_state = 0;
        ///	wire 			{NAME}_address_valid;
        ///	reg	 [1:0]		{NAME}_read_address_part = 0;
        ///	wire [1:0]		{NAME}_write_address_part;
        ///
        ///	assign o_dbg_tmp = {NAME}_rdata;
        ///
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string memory8_template {
            get {
                return ResourceManager.GetString("memory8_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdint.h&gt;
        ///extern &quot;C&quot; {
        ///	uint32_t set_irq_mask(uint32_t mask);
        ///}.
        /// </summary>
        internal static string plumbing {
            get {
                return ResourceManager.GetString("plumbing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	wire 		{NAME}_ready;
        ///	wire 		{NAME}_we;
        ///	wire [{HIGH}:0] {NAME}_wdata;	
        ///
        ///	// byteenabled write
        ///	assign {NAME}_wdata = {
        ///		{be_3}cpu_mem_wstrb[3] ? cpu_mem_wdata[31:24] : {NAME}[31:24],
        ///		{be_2}cpu_mem_wstrb[2] ? cpu_mem_wdata[23:16] : {NAME}[23:16],
        ///		{be_1}cpu_mem_wstrb[1] ? cpu_mem_wdata[15:8]  : {NAME}[15:8],
        ///		{be_0}cpu_mem_wstrb[0] ? cpu_mem_wdata[7:0]   : {NAME}[7:0]
        ///	};
        ///	
        ///	assign {NAME}_ready = cpu_mem_addr[31:{SEG_END}] == {SEG_WIDTH}&apos;h{SEG};
        ///	assign {NAME}_we = {NAME}_ready &amp;&amp; !cpu_me [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string register_template {
            get {
                return ResourceManager.GetString("register_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MEMORY
        ///{
        ///    RAM (xrw)       : ORIGIN = 0x00000000, LENGTH = 0x008000 /* 32 KB */
        ///}
        ///
        ///SECTIONS {
        ///    .text :
        ///    {
        ///        . = ALIGN(4);
        ///        *(.text)           /* .text sections (code) */
        ///        *(.text*)          /* .text* sections (code) */
        ///        *(.rodata)         /* .rodata sections (constants, strings, etc.) */
        ///        *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
        ///        *(.srodata)         /* .rodata sections (constants, strings, etc.) */
        ///        *(.srodata [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sections {
            get {
                return ResourceManager.GetString("sections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // This is free and unencumbered software released into the public domain.
        /////
        ///// Anyone is free to copy, modify, publish, use, compile, sell, or
        ///// distribute this software, either in source code form or as a compiled
        ///// binary, for any purpose, commercial or non-commercial, and by any
        ///// means.
        ///
        ///
        ///#include &quot;custom_ops.S&quot;
        ///.section .data
        ///
        ///.balign 4
        ///irq_handler_addr:
        ///	.word 0x0000000000000000
        ///soft_q2:
        ///	.word 0x0000000000000000
        ///soft_q3:
        ///	.word 0x0000000000000000
        ///soft_q0:
        ///	.word 0
        ///soft_q1:
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string start {
            get {
                return ResourceManager.GetString("start", resourceCulture);
            }
        }
    }
}
